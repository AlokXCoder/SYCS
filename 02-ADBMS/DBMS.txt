INDEX
Sr.
No.
1

Write a basic program that contains DDL and DML
command

24/06/24

2

Write a PL/SQL program to do the following.
a. Write a PL/SQL program to display Hello World.
b. Write a PL/SQL program to Add two numbers.
c. Write a PL/SQL program to add two numbers
by taking input from the user.
d. Write a PL/SQL program to perform operations
of two numbers by taking input from user.
e. Write a PL/SQL program to get Even Numbers.
f. Write a PL/SQL program to get Odd Numbers.
g. Program to check whether the number is even or odd.
h. Write a PL/SQL program to get Fibonacci Series.

01/07/24

3

Write a PL/SQL program to check whether the number is
positive or negative that implements if-else statement.

08/07/24

4

Write a PL/SQL program to perform GoTo Statement.

15/07/24

5

Write a PL/SQL program to do the following:
a. Write a PL/SQL program that perform Simple loop.
b. Write a PL/SQL program to perform while loop.
c. Write a PL/SQL program to perform For loop.

22/07/24

6

Write a PL/SQL program to perform case

29/07/24

7

Write a PL/SQL program to create sequence and use it in
table.

05/08/24

8

Write a PL/SQL program to create Function and use it in
table.

12/08/24

9

Write a PL/SQL program to create Trigger and use it in table.

02/09/24

10

Write a PL/SQL program that implements exception handling.

09/09/24

11

Write a PL/SQL program and implement by creating package,
package body, and using it in table.

23/09/24


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**



Practical 1

Aim: Write a basic program that contains DDL and DML command
DDL(Data Definition Language)


Create
Input:
SQL> CREATE TABLE legends (
 Id INT PRIMARY KEY,
 Name VARCHAR(20),
 age INT,
 address VARCHAR(99),
 salary DECIMAL(38)
 );
Output:
Table created.

Alter
Input:
SQL> ALTER TABLE Legends
2 ADD Department VARCHAR(20);
Output:
Table altered

Truncate.
Input:
SQL> TRUNCATE TABLE Legends;
Output:
Table truncated.

Drop
Input:
SQL> drop table Legends;
Output:
Table dropped.

DML(Data Manipulation Language
Insert
Input:

INSERT INTO Legends VALUES (1, 'Iron Man', 40, 'New York, USA', 100000);
INSERT INTO Legends VALUES (2, 'Captain America', 35, 'London, UK', 80000);
INSERT INTO Legends VALUES (3, 'Thor', 30, 'Asgard, Norway', 120000);
INSERT INTO Legends VALUES (4, 'Black Widow', 32, 'Moscow, Russia', 90000);
INSERT INTO Legends VALUES (5, 'Hulk', 38, 'Tokyo, Japan', 110000);
INSERT INTO Legends VALUES (6, 'Hawkeye', 36, 'Paris, France', 70000);
INSERT INTO Legends VALUES (7, 'Doctor Strange', 42, 'Kathmandu, Nepal', 130000);
INSERT INTO Legends VALUES (8, 'Spider-Man', 25, 'Sydney, Australia', 60000);
INSERT INTO Legends VALUES (9, 'Black Panther', 39, 'Lagos, Nigeria', 105000);
INSERT INTO Legends VALUES (10, 'Ant-Man', 37, 'Beijing, China', 85000);
Output:
1 row created.
1 row created.
1 row created.
1 row created.
1 row created.
1 row created.
1 row created.
1 row created.


Select
Input:
SQL> Select * from Legends;
Output:

ID NAME
1 Iron Man
2 Captain America
3 Thor
4 Black Widow
5 Hulk
6 Hawkeye
7 Doctor Strange
8 Spider-Man
9 Black Panther
10 Ant-Man

AGE ADDRESS
40 New York, USA
35 London, UK
30 Asgard, Norway
32 Moscow, Russia
38 Tokyo, Japan
36 Paris, France
42 Kathmandu, Nepal
25 Sydney, Australia
39 Lagos, Nigeria
37 Beijing, China

SALARY
100000.00
80000.00
120000.00
90000.00
110000.00
70000.00
130000.00
60000.00
105000.00
85000.00


Input: 
SQL> select Id, Name from Legends;
Output:
ID NAME
1 Iron Man
2 Captain America
3 Thor
4 Black Widow
5 Hulk
6 Hawkeye
7 Doctor Strange
8 Spider-Man
9 Black Panther
10 Ant-Man

Input:
SQL> select * from Legends where Id=01;
Output:

delete
Input:
SQL> delete Legends;
Output:
18 rows deleted.


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**


Practical 2
Aim: Write a program to do the following.

a. Write a program to display Hello World.
Input:
Set serveroutput on;
DECLARE
message VARCHAR(20) := 'Hello
World';BEGIN
DBMS_OUTPUT.PUT_LINE(message
); END;
/
Output:
SQL> set serveroutput on; SQL> DECLARE
2
message VARCHAR(20) := 'Hello World';
3
BEGIN
4
DBMS_OUTPUT.PUT_LINE(message);
5
END;
6
/
Hello World
PL/SQL procedure successfully completed.


b. Write a program to Add two numbers.
Input:
DECLARE
n1 number:=10;
n2 number:=20; add number;
BEGIN
add:=n1+n2;
DBMS_OUTPUT.PUT_LINE('Addition is : ' || add);
END;
/
Output:
SQL> DECLARE
2
n1 number:=10;
3
n2 number:=20;
4
add number;
5
BEGIN
6
add:=n1+n2;
7
DBMS_OUTPUT.PUT_LINE('Addition is : ' || add);
8
END;
9
/
Addition is : 30
PL/SQL procedure successfully completed.

c. Write a program to add two numbers by taking input from the user.
Input:
DECLARE
a numeric:=&a;
b numeric:=&b; add numeric;
BEGIN
add:=a+b;
DBMS_OUTPUT.PUT_LINE('Addition is : ' || add);
END;
/
Output:
SQL> DECLARE
2 a numeric:=&a;
3 b numeric:=&b; add numeric; BEGIN
4 add:=a+b;
5 DBMS_OUTPUT.PUT_LINE('Addition is : ' || add); END;
6 /
Enter value for a: 22
old 2: a numeric:=&a;
new 2: a numeric:=22;
Enter value for b: 22
old 3: b numeric:=&b; add numeric; BEGIN
new 3: b numeric:=22; add numeric; BEGIN
Addition is : 44
PL/SQL procedure successfully completed.



d. Write a program to perform operations of two numbers by taking input from user.
Input:
DECLARE
a numeric:=&a;
b numeric:=&b;
add numeric;
sub numeric;
multiply numeric;
div numeric; BEGIN
add:=a+b; sub:=a-b;
multiply:=a*b;
div:=a/b;
DBMS_OUTPUT.PUT_LINE('Addition is : ' || add);
DBMS_OUTPUT.PUT_LINE('Subtraction is : ' || sub);
DBMS_OUTPUT.PUT_LINE('Multiplication is : ' || multiply);
DBMS_OUTPUT.PUT_LINE('Division is : ' || div);
END;
/
Output:
SQL> DECLARE
2
a numeric:=&a;
3
b numeric:=&b;
4
add numeric;
5
sub numeric;
6
multiply numeric;
7
div numeric;
8
BEGIN
9
add:=a+b;
10
sub:=a-b;
11
multiply:=a*b;
12
div:=a/b;
13
DBMS_OUTPUT.PUT_LINE('Addition is : ' || add);
14
DBMS_OUTPUT.PUT_LINE('Subtraction is : ' || sub);
15
DBMS_OUTPUT.PUT_LINE('Multiplication is : ' || multiply);
16
DBMS_OUTPUT.PUT_LINE('Division is : ' || div);
17
END;
18
/
Enter value for a: 20
old 2: a numeric:=&a;
new 2: a numeric:=20;
Enter value for b: 10
old 3: b numeric:=&b;
new 3: b numeric:=10;
Addition is : 30
Subtraction is : 10
Multiplication is : 200
Division is : 2
PL/SQL procedure successfully completed.



e. Write a program to get Even Numbers.
Input:
DECLARE
num number;
BEGIN
num := 1;
LOOP
IF MOD(num, 2) = 0 THEN
DBMS_OUTPUT.PUT_LINE('Even number: ' || TO_CHAR(num));
END IF;
num := num + 1;
EXIT WHEN num> 20;
END LOOP;
END;
/
Output:
SQL> DECLARE
2
num number;
3
BEGIN
4
num := 1;
5
LOOP
6
IF MOD(num, 2) = 0 THEN
7
DBMS_OUTPUT.PUT_LINE('Even number: ' || TO_CHAR(num));
8
END IF;
9
num :=num + 1;
10
EXIT WHEN num> 20;
11
END LOOP;
12
END;
13
/
Even number: 2
Even number: 4
Even number: 6
Even number: 8
Even number: 10
Even number: 12
Even number: 14
Even number: 16
Even number: 18
Even number: 20
PL/SQL procedure successfully completed.



f. Write a program to get Odd Numbers.
Input:
DECLARE
num number;
BEGIN
num := 1;
LOOP
IF MOD(num, 2) != 0 THEN
DBMS_OUTPUT.PUT_LINE('Odd number: ' || TO_CHAR(num));
END IF;
num := num + 1;
EXIT WHEN num> 20;
END LOOP;
END;
/
Output:
SQL> DECLARE
2
num number;
3
BEGIN
4
num := 1;
5
LOOP
6
IF MOD(num, 2) != 0 THEN
7
DBMS_OUTPUT.PUT_LINE('Odd number: ' || TO_CHAR(num));
8
END IF;
9
num :=num + 1;
10
EXIT WHEN num> 20;
11
END LOOP;
12
END;
13
/
Odd number: 1
Odd number: 3
Odd number: 5
Odd number: 7
Odd number: 9
Odd number: 11
Odd number: 13
Odd number: 15
Odd number: 17
Odd number: 19
PL/SQL procedure successfully completed.



g. Program to check whether the number is even or odd.
Input:
DECLARE
n NUMBER := &n;
r NUMBER;
BEGIN
r := MOD(n, 2);
IF r = 0 THEN
dbms_output.Put_line(n ||' is Even Number');
ELSE
dbms_output.Put_line(n ||' is Odd Number');
END IF;
END;
/
Output:
SQL> DECLARE
2
n NUMBER :=&n;
3
r NUMBER;
4
BEGIN
5
r := MOD(n, 2);
6
IF r = 0 THEN
7
dbms_output.Put_line(n ||' is Even Number');
8
ELSE
9
dbms_output.Put_line(n ||' is Odd Number');
10
END IF;
11
END;
12
/
Enter value for n: 10
old 2: n NUMBER := &n;
new 2: n NUMBER := 10;
10 is Even Number
PL/SQL procedure successfully completed.



h. Write a program to get Fibonacci Series.
Input:
DECLARE
num1 number := 0;
num2 number := 1;
temp number;
BEGIN
DBMS_OUTPUT.PUT_LINE('Fibonacci series:');
DBMS_OUTPUT.PUT_LINE(num1);
DBMS_OUTPUT.PUT_LINE(num2);
FOR i IN 2..10 LOOP
temp := num1 + num2;
DBMS_OUTPUT.PUT_LINE(temp);
num1 := num2; num2 := temp;
END LOOP;
END;
/
Output:
SQL> DECLARE
2
num1 number := 0;
3
num2 number := 1;
4
temp number;
5
BEGIN
6
DBMS_OUTPUT.PUT_LINE('Fibonacci series:');
7
DBMS_OUTPUT.PUT_LINE(num1);
8
DBMS_OUTPUT.PUT_LINE(num2);
9
FOR i IN 2..10 LOOP
10
temp := num1 + num2;
11
DBMS_OUTPUT.PUT_LINE(temp);
12
num1 := num2;
13
num2 := temp;
14
END LOOP;
15
END;
16
/
Fibonacci series:
0
1
1
2
3
5
8
13
21
34
55
PL/SQL procedure successfully completed.


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**

Practical 3
Aim: Write a program to check whether the number is positive or negative that implements if-else statement.
Input:
DECLARE
a NUMBER;
BEGIN
a := &a;
IF a > 0 THEN
DBMS_OUTPUT.PUT_LINE(a || ' is a positive number.');
ELSIF a < 0 THEN
DBMS_OUTPUT.PUT_LINE(a || ' is a negative number.');
ELSE
DBMS_OUTPUT.PUT_LINE(a || ' is zero.');
END IF;
END;
/
Output:
SQL> DECLARE
2
a numeric :=&a;
3
BEGIN
4
IF a>0 THEN
5
DBMS_OUTPUT.PUT_LINE(a||' is a positive number.');
6
ELSIF a<0 THEN
7
DBMS_OUTPUT.PUT_LINE(a||' is a negative number.');
8
ELSE
9
DBMS_OUTPUT.PUT_LINE(a||' is zero.');
10
END IF;
11
END;
12
/
Enter value for a: -10
old 2: a numeric := &a;
new 2: a numeric := -10;
-10 is a negative number.


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**

Practical 4
Aim: Write a program to perform GoTo Statement.
Input:
DECLARE
a NUMBER(2) := 30;
BEGIN
<<loopstart>>
WHILE a < 50 LOOP
DBMS_OUTPUT.PUT_LINE('value of a: ' || a);
a := a + 1;
IF a = 35 THEN
a := a + 1;
GOTO loopstart;
END IF;
END LOOP;
END;
/
Output:
value of a: 30
value of a: 31
value of a: 32
value of a: 33
value of a: 34
value of a: 36
value of a: 37
value of a: 38
value of a: 39
value of a: 40
value of a: 41
value of a: 42
value of a: 43
value of a: 44
value of a: 45
value of a: 46
value of a: 47
value of a: 48
value of a: 49
PL/SQL procedure successfully completed.


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**
Practical 5
Aim: Write a program to do the following:

a. Write a program that perform Simple loop.
Input:
DECLARE
i NUMBER := 1;
BEGIN
LOOP
EXIT WHEN i > 10;
DBMS_OUTPUT.PUT_LINE(i);
i := i + 1;
END LOOP;
END;
/
Output:
1
2
3
4
5
6
7
8
9
10
PL/SQL procedure successfully completed.


b. Write a program to perform while loop.
Input:
DECLARE
i INTEGER := 1;
BEGIN
WHILE i <= 10 LOOP
DBMS_OUTPUT.PUT_LINE(i);
i := i + 1;
END LOOP;
END;
/
Output:
1
2
3
4
5
6
7
8
9
10
PL/SQL procedure successfully completed.


c. Write a program to perform For loop.
Input:
DECLARE
VAR1 NUMBER;
VAR2 NUMBER;
BEGIN
VAR1 := 10;
FOR VAR2 IN 1..10 LOOP
DBMS_OUTPUT.PUT_LINE(VAR1 * VAR2);
END LOOP;
END;
/
Output:
10
20
30
40
50
60
70
80
90
100
PL/SQL procedure successfully completed.


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**


Practical 6
Aim: Write a program to perform case
Input:
DECLARE
grade CHAR(1) := 'A';
BEGIN
CASE grade
WHEN 'A' THEN DBMS_OUTPUT.PUT_LINE('Excellent');
WHEN 'B' THEN DBMS_OUTPUT.PUT_LINE('Very good');
WHEN 'C' THEN DBMS_OUTPUT.PUT_LINE('Good');
WHEN 'D' THEN DBMS_OUTPUT.PUT_LINE('Average');
WHEN 'F' THEN DBMS_OUTPUT.PUT_LINE('Passed with Grace');
ELSE DBMS_OUTPUT.PUT_LINE('Failed');
END CASE;
END;
/
Output:
Excellent
PL/SQL procedure successfully completed.


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**


Practical 7
Aim:Write a program to create sequence and use it in table.
Input:
create sequence seqq
minvalue 1
maxvalue 20
start with 1
increment by 5;
Output:
SQL> create sequence seqq
2 minvalue 1
3 maxvalue 20
4 start with 1
5 increment by 5;
Sequence created.

SQL> Insert into Marvel values(seqq.nextval,'Alok');
1 row created..

SQL> select * from Marvel;

ID NAME
1 ALOK


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**


Practical 8
Aim: Write a program to create Function and use it in table.
Input:
set serveroutput on
CREATE OR REPLACE FUNCTION adder(
n1 IN NUMBER,
n2 IN NUMBER
) RETURN NUMBER IS
n3 NUMBER(8);
BEGIN
n3 := n1 + n2;
RETURN n3;
END;
/Function created.//


DECLARE
n3 NUMBER(2);
BEGIN
n3 := adder(11, 22);
DBMS_OUTPUT.PUT_LINE('Addition is: ' || n3);
END;
//PL/SQL procedure successfully completed.//


Output:
SQL> DECLARE
2 n3 NUMBER(2);
3 BEGIN
4 n3 := adder(11, 22);
5 DBMS_OUTPUT.PUT_LINE('Addition is: ' || n3);
6 END;
7 /
Addition is: 33
PL/SQL procedure successfully completed..



//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**


Practical 9
Aim:Write a program to create Trigger and use it in table.
Input:
CREATE TABLE customer (
ID INT PRIMARY KEY,
NAME VARCHAR2(50),
AGE INT,
ADDRESS VARCHAR2(100),
SALARY NUMBER(10, 2)
);
Table created.


BEGIN
INSERT INTO customer (ID, NAME, AGE, ADDRESS, SALARY) VALUES (1, 'Ramesh', 23,
'Allahabad', 20000);
INSERT INTO customer (ID, NAME, AGE, ADDRESS, SALARY) VALUES (2, 'Suresh', 22,
'Kanpur', 22000);
INSERT INTO customer (ID, NAME, AGE, ADDRESS, SALARY) VALUES (3, 'Mahesh', 24,
'Ghaziabad', 24000);
INSERT INTO customer (ID, NAME, AGE, ADDRESS, SALARY) VALUES (4, 'Chandan', 25,
'Noida', 26000);
INSERT INTO customer (ID, NAME, AGE, ADDRESS, SALARY) VALUES (5, 'Alex', 21,
'Paris', 28000);
INSERT INTO customer (ID, NAME, AGE, ADDRESS, SALARY) VALUES (6, 'Sunita', 20,
'Delhi', 30000);
END;
/
PL/SQL procedure successfully completed.


CREATE OR REPLACE TRIGGER display_salary_changes
BEFORE DELETE OR INSERT OR UPDATE ON customer
FOR EACH ROW
WHEN (NEW.ID > 0)
DECLARE
sal_diff NUMBER;
BEGIN
sal_diff := :NEW.salary - :OLD.salary;
DBMS_OUTPUT.PUT_LINE('Old salary: ' || :OLD.salary);
DBMS_OUTPUT.PUT_LINE('New salary: ' || :NEW.salary);
DBMS_OUTPUT.PUT_LINE('Salary difference: ' || sal_diff);
END;
/
Trigger created.


DECLARE
total_rows NUMBER(2);
BEGIN
UPDATE customer
SET salary = salary + 5000;
IF SQL%NOTFOUND THEN
DBMS_OUTPUT.PUT_LINE('No customer updated');
ELSIF SQL%FOUND THEN
total_rows := SQL%ROWCOUNT;
DBMS_OUTPUT.PUT_LINE(total_rows || ' customer updated ');
END IF;
END;
/


Output:
Old salary: 20000
New salary: 25000
Salary difference: 5000
Old salary: 22000
New salary: 27000
Salary difference: 5000
Old salary: 24000
New salary: 29000
Salary difference: 5000
Old salary: 26000
New salary: 31000
Salary difference: 5000
Old salary: 28000
New salary: 33000
Salary difference: 5000
Old salary: 30000
New salary: 35000
Salary difference: 5000
6 customer updated
PL/SQL procedure successfully completed.


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**


Practical 10
Aim: Write a program that implements exception handling.

CREATE TABLE Customers (
  ID NUMBER PRIMARY KEY,
  NAME VARCHAR2(50),
  AGE NUMBER,
  ADDRESS VARCHAR2(100),
  SALARY NUMBER
);


INSERT INTO CUSTOMERs VALUES (1, 'Robert Downey', 37, 'Mumbai', 50000); 
INSERT INTO CUSTOMERsVALUES (2, 'Alok Jaiswar', 25, 'Bangalore', 60000); 
INSERT INTO CUSTOMERs VALUES (3, 'Amit Verma', 40, 'Delhi', 70000); 
INSERT INTO CUSTOMERs VALUES (4, 'Neha Rao', 28, 'Hyderabad', 55000); 
INSERT INTO CUSTOMERs VALUES (5, 'Vikram Singh', 35, 'Gurgaon', 65000); 
INSERT INTO CUSTOMERs VALUES (6, 'Anjali Mehta', 22, 'Pune', 45000); 
INSERT INTO CUSTOMERs VALUES (7, 'Sita Nair', 38, 'Chennai', 58000); 
INSERT INTO CUSTOMERs VALUES (8, 'Karan Joshi', 32, 'Ahmedabad', 62000);

SET LINESIZE 120
SET PAGESIZE 50
COLUMN ID FORMAT 9999
COLUMN NAME FORMAT A30
COLUMN AGE FORMAT 99
COLUMN ADDRESS FORMAT A20
COLUMN SALARY FORMAT 99999
SELECT * FROM CUSTOMER;


Input:
SQL> select * from customers;
ID NAME
AGE ADDRESS
1 Ramesh
2 Khilan
3 Kaushik
4 Chaitali
5 Hardik
6 Rohan
7 Rajnish
7 Rajnish

32 Ahmedabad
25 Mumbai
23 Delhi
25 Kota
27 Lucknow
22 Bhopal
25 Chennai
25 Chennai

SALARY

3000
3000
3000
7500
9500
5500
3500
3500

Output:
8 rows selected.
Input:
DECLARE
c_id customers.id%type := 8;
c_name customers.name%type;
c_addr customers.address%type;
BEGIN
SELECT name, address INTO c_name, c_addr
FROM customers
WHERE id = c_id;
DBMS_OUTPUT.PUT_LINE('Name: ' || c_name);
DBMS_OUTPUT.PUT_LINE('Address: ' || c_addr);
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No such customer!');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Error!');
END;
/

Output:
No such customer!
PL/SQL procedure successfully completed.


//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**//**


Practical 11
Aim: Write a program and implement by creating package ,package body, and using it in table.
Input:
SQL> select * from customers;
ID NAME

1 Olivia
2 Ethan
3 Lucas
4 Ava
5 Logan
6 Alexander

AGE ADDRESS

SALARY

32 Ahmedabad
25 Mumbai
23 Delhi
25 Kota
27 Lucknow
22 Bhopal

3000
3000
3000
7500
9500
5500

6 rows selected.


Creation of Package

CREATE OR REPLACE PACKAGE c_package AS
PROCEDURE addCustomer(
c_id customers.id%type,
c_name customers.Name%type,
c_age customers.age%type,
c_addr customers.address%type,
c_sal customers.salary%type
);
PROCEDURE delCustomer(c_id customers.id%TYPE);
PROCEDURE listCustomer;
END c_package;
/
Output:
Package created.


Package Body

CREATE OR REPLACE PACKAGE BODY c_package AS
PROCEDURE addCustomer(
c_id customers.id%type,
c_name customers.Name%type,
c_age customers.age%type,
c_addr customers.address%type,
c_sal customers.salary%type
) IS
BEGIN
INSERT INTO customers (id, name, age, address, salary)
VALUES (c_id, c_name, c_age, c_addr, c_sal);
END addCustomer;
PROCEDURE delCustomer(c_id customers.id%type) IS
BEGIN
DELETE FROM customers
WHERE id = c_id;
END delCustomer;
PROCEDURE listCustomer IS
CURSOR c_customers IS
SELECT name FROM customers;
TYPE c_list IS TABLE OF customers.Name%type;
name_list c_list := c_list();
counter INTEGER := 0;
BEGIN
FOR n IN c_customers LOOP
counter := counter + 1;
name_list.EXTEND;
name_list(counter) := n.name;
DBMS_OUTPUT.PUT_LINE('Customer(' || counter || ') ' || name_list(counter));
END LOOP;
END listCustomer;
END c_package;
/

Output :
Package body created.
Package Implementation

SET SERVEROUTPUT ON;
DECLARE
code customers.id%type := 8;
BEGIN
c_package.addCustomer(7, 'Alok', 25, 'Chennai', 3500);
c_package.addCustomer(8, 'Stark', 32, 'Delhi', 7500);
c_package.listCustomer;
c_package.delCustomer(code);
c_package.listCustomer;
END;
/

Output :
Customer(1)Oliver Customer(2)Emma Customer(3)Ava Customer(4)Liam Customer(5)Noah
Customer(6)Ethan Customer(7)Alok Customer(8)Stark
Customer(1)Oliver Customer(2)Emma Customer(3)Ava Customer(4)Liam Customer(5)Noah
Customer(6)Ethan Customer(7)Alok
PL/SQL procedure successfully completed.


